{"version":3,"sources":["logo.svg","Header.js","Footer.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleNavbar","bind","assertThisInitialized","state","collapsed","setState","react_default","a","createElement","Container","Navbar","color","light","NavbarBrand","href","className","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","Component","Footer","Row","id","Col","Content","Card","body","inverse","style","backgroundColor","borderColor","CardTitle","CardText","Button","App","fluid","Header_Header","Content_Content","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52213670.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Container, Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\n\nexport default class Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n  render() {\n    return (\n      <Container>\n        <Navbar color=\"faded\" light>\n          <NavbarBrand href=\"/\" className=\"mr-auto text-light\">prv</NavbarBrand>\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n          <Collapse isOpen={!this.state.collapsed} navbar>\n            <Nav navbar>\n              <NavItem>\n                <NavLink className=\"text-light\" href=\"#\">About</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink className=\"text-light\" href=\"#\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\n\n\nexport default class Footer extends Component {\n  render() {\n    return (\n      <Container>\n        <Row id=\"lab_social_icon_footer\">\n          <Col>\n            <a href=\"#\"><i id=\"social-fb\" className=\"fa fa-facebook-square fa-3x social\"></i></a>\n            <a href=\"#\"><i id=\"social-tw\" className=\"fa fa-twitter-square fa-3x social\"></i></a>\n            <a href=\"#\"><i id=\"social-gp\" className=\"fa fa-google-plus-square fa-3x social\"></i></a>\n            <a href=\"#\"><i id=\"social-em\" className=\"fa fa-envelope-square fa-3x social\"></i></a>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Jumbotron, Button, Container, Row, Col } from 'reactstrap';\nimport { Card, CardTitle, CardText } from 'reactstrap';\n\n\nexport default class Content extends Component {\n  render() {\n    return (\n      <Container>\n      <Row>\n          <Col className=\"text-light\">\n            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\n              <CardTitle>We are PRV</CardTitle>\n              <CardText>Comming soon.</CardText>\n              <Button>Learn More</Button>\n             </Card>\n          </Col>\n          <Col className=\"text-light\">\n            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\n              <CardTitle>Special Title Treatment</CardTitle>\n              <CardText>Comming soon.</CardText>\n              <Button>Learn More</Button>\n             </Card>\n          </Col>\n      </Row>\n      <Row>\n          <Col className=\"text-light\">\n            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\n              <CardTitle>Reward calculator</CardTitle>\n              <CardText>Comming soon.</CardText>\n              <Button>Learn More</Button>\n             </Card>\n          </Col>\n          <Col className=\"text-light\">\n            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\n              <CardTitle>Charts</CardTitle>\n              <CardText>Comming soon.</CardText>\n              <Button>Learn More</Button>\n             </Card>\n          </Col>\n      </Row>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Content from './Content';\nimport { Container, Row, Col } from 'reactstrap';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container className=\"App\" fluid>\n        <Row>\n          <Header/>\n        </Row>\n        <Row>\n          <Content/>\n        </Row>\n        <Row className=\"Footer\">\n          <Footer/>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}